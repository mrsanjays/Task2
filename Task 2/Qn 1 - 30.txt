Write a program to print a letters from the user input character to 'Z' without using
strings.
Example 1:  input : X
Output : XYZ
Example 2:  Input : M
Output : MNOPQRSTUWXYZ


public class UptoX {
    public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      char input = sc.next().charAt(0);
      Solution(input);
  }
  public static void Solution(char ch){
    for(char i = ch; i < 91 ; i++){
      System.out.print(i);
    }
  }
}

########################################################################################################################################################################################################################################################################################################################

Write a program to define the functionality of a Bitwise operators

public class Bitwise {
   
    public static void main(String[] args) {
        int A = 10 , B = 2;
        // Bitwise And -> if Both bits matches set to 1 , else 0
        System.out.println(A&B);

        // Bitwise OR -> if any one of bits is 1 , set to 1 , else 0
        System.out.println(A|B);

        // Bitwise Ex-Or -> if both bits different means set to 1 , otherwise 0
        System.out.println(A^B);

        // Left shift -> shift A to left side with respect to B postion
        System.out.println(A<<B);

        // Right shift -> shift A to right side with respect to B postion
        System.out.println(A>>B);

        // complement -> it makes inverse of the bits
        System.out.println(~A);
    }
}

########################################################################################################################################################################################################################################################################################################################


Write a program for the following. Let consider 20 students in a class with the roll no
101-120. We are going to split them into four groups. Based on their roll number we are
going to split them with the following logics.

 public static void main(String[] args) {
        int input = 20;
        int j = 100;
        for(int i = 1;i<5;i++)
	{
            System.out.println("Group "+i);
            int z = j + i;
            while(z <= 120){
                System.out.println(z);
                z += 4;
        }
     }

########################################################################################################################################################################################################################################################################################################################


Write a program to print the number 7.50 without using String(print 7.50 not 7.5).

	double x = 7.50;
        System.out.printf("%.2f",x);

########################################################################################################################################################################################################################################################################################################################


Write a program to evaluate the polynomial equation (ax^2 + bx + c = 0 )

static void equation1(double a, double b, double c){

        double y = Math.sqrt((Math.pow(b,2)-(4*a*c)));
        int x1 = (int) ((-b + y ) / (2* a));
        int x2 = (int) (( -b - y) / ( 2 * a));
        System.out.print("The values of x are "+x1 +" "+ x2);
    }
    
public static void main(String[] args) {
        equation1(1, 5, 6); // x^2 + 5x + 6 = 0;
    }

########################################################################################################################################################################################################################################################################################################################


Evaluate the following expression on paper and on program and understand the
difference

i)++a-b--  
	++a prefix -> it increment and replace before the substitution
	b-- suffix -> it replace first and increment after 
	example = a-> 4 , b -> 3
	(++a - b--) -> (5 - 3) --> ans = 2
	a becomes 5 and b becomes 2


 ii)a%b++   
	Example a = 5 , b =3
	a%b++ --> 5%3 --> ans = 2
	b becomes 4

 iii)a*=b+5    
	addition occurs first ( High priority)
	then assignment operators

	example a = 5 , b = 2
	a*=b+5 -> 5 * ( 2 + 5) --> ans = 35  
  
 iv)x=69>>>2 
	zero fill right shift operator -> shortcut a>>>b = a/(pow(2,b))
	69>>>2 = 69 / 4 -> 17

########################################################################################################################################################################################################################################################################################################################


Evaluate the following expression on paper and on program and understand the
difference
	a+=a++ + ++a + –a + a–; when a=28

 	28 += ( 28 + 30 + 29 + 29) -> ans = 144

########################################################################################################################################################################################################################################################################################################################


Program to Find ASCII Value of a Character

	int ch = 'a'; // implicitly convert into int 
        System.out.println(ch);

########################################################################################################################################################################################################################################################################################################################


Write a program to display the number in reverse order without use of String
functions.
Eg 1:  Input: 12345
Output :The number in reverse order is : 54321

public  void reverse(int number){
        int res = 0;
        while ( number > 0){
            res = res * 10 + number % 10;
            number/=10;
        }
        System.out.println(res);
    }

########################################################################################################################################################################################################################################################################################################################

Using Recursion, reverse the string such as
Eg 1:  Input: one two three
       Output: three two one
Eg 2:  Input: I love india
       Output: india love I

	public static void main(String[] args) {
        	String s = "I love india";
        	System.out.println(reverseString(s));
	}

    	public static String reverseString(String s){
        	if(s.length() == 0 || !s.contains(" "))
            		return s;
        	int i = s.indexOf(" ");
        	return reverseString(s.substring(i+1)) +" "+ s.substring(0, i);
    	}

########################################################################################################################################################################################################################################################################################################################

Write a program to give the following output for the given input:
Eg 1:  Input: a1b10
Output: abbbbbbbbbb
Eg: 2:  Input: b3c6d15
           Output: bbbccccccddddddddddddddd
The number varies from 1 to 99

   public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        System.out.println(solution(s));
        
    }
    static String solution(String s){

        StringBuilder res = new StringBuilder();
        for(int i = 0; i < s.length();){
            if(Character.isAlphabetic(s.charAt(i))){
                int j = i+1;
                while(j<s.length()&& Character.isDigit(s.charAt(j))){
                    j++;
                }
                int times = Integer.valueOf(s.substring(i+1, j));
                while(times-->0){
                    res.append(s.charAt(i));
                }
                i = j;
            }
        }
        return res.toString();
    }

########################################################################################################################################################################################################################################################################################################################


 Program to Check Whether a Character is an Alphabet or not

	char ch = 'z';
        if(ch>=65 && ch <= 90 || ch >= 97 && ch <= 122 ){
            System.out.println("Yes");
        }
        else System.out.println("No");


########################################################################################################################################################################################################################################################################################################################


Java Program to print the smallest element in an array

	public static void main (String[] args) {
		int[] arr = {4,2,15,6,8};
		System.out.println(smallestArr(arr));
	}
	static int smallestArr(int[] arr){
	    int min = Integer.MAX_VALUE;
	    for(int x : arr){
	        if( x < min) min = x;
	    }
	    return min;
	}

########################################################################################################################################################################################################################################################################################################################


Java Program to copy all elements of one array into another array

	public static void main (String[] args) {
		int[] arr = {4,2,15,6,8};
		System.out.println(Arrays.toString(copyArr(arr)));
	}
	static int[] copyArr(int[] arr){
	    int[] newArray = new int[arr.length];
	    for( int i = 0 ; i<arr.length;i++){
	        newArray[i] = arr[i];
	    }
	    return newArray;

	}

########################################################################################################################################################################################################################################################################################################################


Java Program to print the duplicate elements of an array

public static void main(String[] args) {
        int[] arr = {2,1,5,7,8,7,6,6,6,10,3,2,0,3,2};
        System.out.println(findDuplicate(arr)); // [7, 6, 2, 3]
    }
    public static List<Integer> findDuplicate(int[] arr){
        List<Integer> res = new ArrayList<>();
        Map<Integer , Integer> map = new HashMap<>();
        for( int x : arr){
            map.put(x,map.getOrDefault(x,0)+1);
            if(map.get(x) == 2){
                res.add(x);
            }
        }
        return res;
    }

########################################################################################################################################################################################################################################################################################################################


Given two sorted arrays, merge them such that the elements are not repeated
Example 1:
Input: Array 1: 2,4,5,6,7,9,10,13
         Array 2: 2,3,4,5,6,7,8,9,11,15
Output: Merged array: 2,3,4,5,6,7,8,9,10,11,13,15


   public static void main(String[] args) {
        int[] arr1 = {2,4,5,6,7,9,10,13};
        int [] arr2 = {2,3,4,5,6,7,8,9,11,15};
        System.out.println(mergeArray(arr1,arr2));
    }

    static List<Integer> mergeArray(int[] a1 , int[] a2){
        List<Integer> res = new ArrayList<>();
        int i = 0 , j = 0;
        while( i < a1.length && j < a2.length){
            if(a1[i] == a2[j]){
                res.add(a1[i]);
                i++; j++;
            }
            else if( a1[i]< a2[j]){
                res.add(a1[i]);
                i++;
            }
            else{
                res.add(a2[j]);
                j++;
            }
        }
        for(int k = i ; k < a1.length;k++){
            res.add(a1[k]);
        }
        for(int k = j ; k < a2.length;k++){
            res.add(a2[k]);
        }

        return res;
    }

########################################################################################################################################################################################################################################################################################################################


Alternate sorting: Given an array of integers, rearrange the array in such a way that
the first element is first maximum and second element is first minimum.
 Example:  Input : {1, 2, 3, 4, 5, 6, 7}
Output: {7, 1, 6, 2, 5, 3, 4}

   public static void main(String[] args) {
        int[] arr = {1, 2, 3,4, 5, 6, 7};
        System.out.println(alternateSort(arr));
    }
    static List<Integer> alternateSort(int[] arr){
        Arrays.sort(arr);
        List <Integer> res = new ArrayList<>();
        int i = 0,j = arr.length-1;
        while(i<j){
            res.add(arr[j]);
            res.add(arr[i]);
            j--; i++;
        }
        if(arr.length % 2==1){
            res.add(arr[i]);
        }
        return res;
    }

########################################################################################################################################################################################################################################################################################################################


Write a program to sort the elements in odd positions in descending order and
elements in ascending order.
Eg 1:  Input:  13,2 4,15,12,10,5
         Output: 13,2,12,10,5,15,4
Eg 2:  Input: 1,2,3,4,5,6,7,8,9
         Output: 9,2,7,4,5,6,3,8,1

    public static void main(String[] args) {
        int arr[] = {13,2 ,4,15,12,10,5};  //1,2,3,4,5,6,7,8,9
        sortOddEven(arr);
        System.out.println(Arrays.toString(arr));
    }
    static void sortOddEven(int[] arr){
        List<Integer> odd = new ArrayList<>();
        List<Integer> even = new ArrayList<>();
        for(int i = 0 ; i<arr.length;i++){
            if(i% 2 == 0){
                odd.add(arr[i]);
            }
            else{
                even.add(arr[i]);
            }
        }
        Collections.sort(odd);
        Collections.sort(even);
        int evenPos = 1;
        for(Integer x : even){
            arr[evenPos] = x;
            evenPos+=2;
        }
        int oddPos = arr.length % 2 == 1 ? arr.length - 1 : arr.length - 2;
        for(Integer x : odd){
            arr[oddPos] = x;
            oddPos -= 2;
        }

    }

########################################################################################################################################################################################################################################################################################################################

Patterns
 
	1        
       121
      12321
     1234321
    123454321    
   12345654321
  1234567654321
 123456787654321
12345678987654321

    public static void main(String[] args) {
       patternOneToN(9);
    }
    static void patternOneToN(int n)
    {
        for(int i = 1 ; i <= n ;i++)
        {
            int j,k;
            for(j = 1;j<=n-i ;j++){
                System.out.print(" ");
            }
            
            for( j = 1 ; j <= i ; j++){
                System.out.print(j);
            }
            
            for( k = j - 2 ; k > 0 ; k--){
                System.out.print(k);
            }
            for(j = 1;j<=n-i ;j++){
                System.out.print(" ");
            }
            System.out.println();
        }
    }

########################################################################################################################################################################################################################################################################################################################


 	9        
       898
      78987
     6789876
    567898765
   45678987654
  3456789876543  
 234567898765432
12345678987654321

    public static void main(String[] args) {
        patternNtoOne(9);
    }
    static void patternNtoOne(int n){
        for(int i = 1 ; i <= n ;i++)
        {
            int j,k;
            for(j = 1;j<=n-i ;j++){
                System.out.print(" ");
            }
            
            for( j = n - i + 1 ; j <= 9 ; j++){
                System.out.print(j);
            }

            for( k = 8 ; k >= n-i+1 ;k-- ){
                System.out.print(k);
            }
            for(j = 1;j<=n-i ;j++){
                System.out.print(" ");
            }
            System.out.println();
        }
    }

########################################################################################################################################################################################################################################################################################################################


* * * * * * * * * 
 * * * * * * * *
  * * * * * * *
   * * * * * *
    * * * * *
     * * * *
      * * *
       * *
        *

    public static void main(String[] args) {
        inversePyramid(9);
    }
    static void inversePyramid(int n){
        for(int i = 1; i<= n ; i++)
        {
            int j ;
            for( j = 1;j<i;j++){
                System.out.print(" ");
            }
            for(j = i ; j<= n;j++){
                System.out.print("*"+" ");
            }
            System.out.println();
        }
    }

########################################################################################################################################################################################################################################################################################################################


9 9 9 9 9 9 9 9 9 
 8 8 8 8 8 8 8 8
  7 7 7 7 7 7 7
   6 6 6 6 6 6
    5 5 5 5 5
     4 4 4 4
      3 3 3
       2 2
        1

    public static void main(String[] args) {
        inversePyramidwithNumber(9);
    }
    static void inversePyramidwithNumber(int n)
    {
        for(int i = 1; i<= n ; i++)
        {
            int j ;
            for( j = 1;j<i;j++){
                System.out.print(" ");
            }
            for(j = i ; j<= n;j++){
                System.out.print(n-i+1 +" ");
            }
            System.out.println();
        }   
    }


########################################################################################################################################################################################################################################################################################################################


 Write a program to make such a pattern like a pyramid with numbers increased by 1.
Eg:  Input : 10
Output:
     1
    2 3
   4 5 6
  7 8 9 10

   public static void main(String[] args) {
        PyramidwithNumber(10);
    }
    static void PyramidwithNumber(int n ){
        int rows = 1;
        int sm = 1;
        while (sm < n){
            rows++;
            sm = rows * (rows+1) /2;
        }
        int k = 1;
        for(int i = 1 ; i <= rows;i++){
            for(int j = 1 ; j<rows-i+1;j++){
                System.out.print(" ");
            }
            for(int j = 1 ; j<=i;j++){
                System.out.print(k+" ");
                k++;
            }
            System.out.println();
        }
    }

########################################################################################################################################################################################################################################################################################################################


Write a program to print the following output for the given input. You can assume
the string is of odd length
Eg 1:  Input: 12345
        Output:
1       5
  2   4
    3
  2   4
1        5

    public static void main(String[] args) {
        printStringX("1234589");
    }
    static void printStringX(String s){
        int mid = s.length()/2;
        int l = 0,r= s.length()-1;
        for(int i = 0 ; i<=mid;i++){
            for(int j = 0;j<i;j++){
                System.out.print(" ");
            }
            if(i == mid){
                System.out.println(s.charAt(i)); continue;
            }
            System.out.print(s.charAt(l)); 
            int times = r-l;
            l++;
            while(times-->0){
                System.out.print(" ");
            }
            System.out.print(s.charAt(r));
            r--;
            System.out.println();
        }
        l = mid-1 ; r = mid + 1;
        for(int i = mid + 1 ; i<s.length();i++){
            for(int j = i;j<s.length()-1;j++){
                System.out.print(" ");
            }
            System.out.print(s.charAt(l)); 
            int times = r-l;
            while(times-->0){
                System.out.print(" ");
            }
            l--;
            System.out.print(s.charAt(r));
            r++;
            System.out.println();
        }    
    }

########################################################################################################################################################################################################################################################################################################################


Write a program to print the following pattern for the given input number.
Eg 1:  Input: 4
        Output:
********
***__***
**____**
*______*
**____**
***__***
********

    public static void main(String[] args) {
        printStringStar(10);
    }
    static void printStringStar(int n){
        for(int i = 1;i<=n;i++)
        {
            for(int j = n - i + 1;j>0;j--){
                System.out.print("*");
            }
            for(int j = 1;j<i;j++){
                System.out.print("_");
                System.out.print("_");
            }
            for(int j = n - i + 1;j>0;j--){
                System.out.print("*");
            }
            System.out.println();
        }
        for(int i = 1;i<n;i++)
        {
            for(int j = 0 ;j<=i;j++){
                System.out.print("*");
            }
            for(int j = i;j<n-1;j++){
                System.out.print("_");
                System.out.print("_");
            }
            for(int j = 0 ;j<=i; j++){
                System.out.print("*");
            }
            System.out.println();
        }
    }

########################################################################################################################################################################################################################################################################################################################


Find if a String2 is substring of String1. If it is, return the index of the first
occurrence. else return -1.
Eg 1: Input: String 1: test123string
          String 2: 123
         Output: 4
Eg 2:  Input: String 1: testing12
         String 2: 1234
         Output: -1

   public static void main(String[] args) {
        String s1 = "test123string";
        String s2 = "123";
        if(s1.indexOf(s2)<0){
            System.out.println(-1);
        }
        else{
            System.out.println(s1.indexOf(s2));
        }
    }

########################################################################################################################################################################################################################################################################################################################

Write a program to find the sum of the series. The series will be like 1 +11 + 111 +
1111 +.. n terms.
Eg 1: Input:  Input the number of terms : 5
Output :
1 + 11 + 111 + 1111 + 11111
The Sum is : 12345
Eg 2: Input:  Input the number of terms : 3
Output :
1 + 11 + 111
The Sum is : 123

    public static void main(String[] args) {
        System.out.println(sumOfSeries(7));
    }
    static long  sumOfSeries(int n){
        long sum = 0;
        int series = 1,j=1;
        for(int i = 1 ; i<=n;i++){
            sum += series ;
            j*=10;
            series += j;
        }
        return sum;
    }


########################################################################################################################################################################################################################################################################################################################


Write a program to print the alphabet 'C' with the stars based on the given numbers
Eg 1:  Input: 4
        Output:
 ****
*
*
 ****

    public static void main(String[] args) {
        cPattern(5);
    }
    static void cPattern(int n){
        for(int i = 1 ; i <= n;i++){
            if( i == 1 || i == n){
                System.out.print(" ");
                for(int j = 0 ; j<n;j++){
                    System.out.print("*");
                }
            }
            else{
                System.out.print("*");
            }
            System.out.println();
        }
    }

########################################################################################################################################################################################################################################################################################################################


 Given a N*N square matrix, return an array of its anti-diagonals. Look at the example for more
details.
Example
Input:
1 2 3
4 5 6
7 8 9

Output : [
[1],
[2, 4],
[3, 5, 7],
[6, 8],
[9]
]

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] mat = new int[n][n];
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                mat[i][j] = sc.nextInt();
            }
        }
       
        System.out.println(antiDiagonal(mat,n));
    }
    static ArrayList<ArrayList<Integer>> antiDiagonal(int[][] mat,int n){
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        for(int x = 0 ;x<n;x++){
            ArrayList <Integer> r = new ArrayList<>();
            int j = x,i = 0;
            while(j>=0 && i<n){
                r.add(mat[i][j]);
                j--; i++;
            }
            res.add(r);
        }
        for(int x = 1;x<n;x++){
            ArrayList <Integer> r = new ArrayList<>();
            int i = x , j = n-1;
            while(i < n && j >= 0){
                r.add(mat[i][j]);
                i++;j--;
            }
            res.add(r);
        }
        return res;
    }

########################################################################################################################################################################################################################################################################################################################